#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int task_id;
    int execution_time;
    int period;
    int remaining_time;
    int priority;
} Task;

int compare_priority(const void *a, const void *b) {
    Task *task_a = (Task *)a;
    Task *task_b = (Task *)b;
    return task_a->period - task_b->period; // Shorter period -> higher priority
}

void RMS_Scheduling(Task tasks[], int num_tasks) {
    int time = 0;
    int tasks_completed = 0;
   
    // Calculate priority based on period
    for (int i = 0; i < num_tasks; i++) {
        tasks[i].priority = tasks[i].period;
        tasks[i].remaining_time = tasks[i].execution_time;
    }
   
    // Sort tasks based on their period (priority)
    qsort(tasks, num_tasks, sizeof(Task), compare_priority);
   
    while (tasks_completed < num_tasks) {
        for (int i = 0; i < num_tasks; i++) {
            // If the task is ready and has remaining time to execute
            if (tasks[i].remaining_time > 0) {
                printf("Time %d: Executing Task %d\n", time, tasks[i].task_id);
                tasks[i].remaining_time--;
                if (tasks[i].remaining_time == 0) {
                    tasks_completed++;
                    printf("Time %d: Task %d completed\n", time, tasks[i].task_id);
                }
                break;
            }
        }
        time++;
    }
}

int main() {
    Task tasks[] = {
        {1, 3, 5}, // Task 1: execution time 3, period 5
        {2, 2, 7}, // Task 2: execution time 2, period 7
        {3, 1, 4}  // Task 3: execution time 1, period 4
    };

    int num_tasks = sizeof(tasks) / sizeof(tasks[0]);
    RMS_Scheduling(tasks, num_tasks);
    return 0;
}
